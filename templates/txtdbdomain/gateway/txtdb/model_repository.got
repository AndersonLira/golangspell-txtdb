package txtdb

import (
	"encoding/json"
	"errors"
    "fmt"
	"log"
	"time"

    "{{.ModuleName}}/domain"
	"github.com/andersonlira/goutils/io"
	"github.com/andersonlira/goutils/str"
)

//Get{{.DomainEntity}}List return all items 
func Get{{.DomainEntity}}List() []domain.{{.DomainEntity}} {
	list := []domain.{{.DomainEntity}}{}
    fileName := fmt.Sprintf("bd/%ss.json", "{{.DomainEntity}}");
	listTxt, _ := io.ReadFile(fileName)
	json.Unmarshal([]byte(listTxt), &list)
	return list
}

//Get{{.DomainEntity}}ByID return item by its id
func Get{{.DomainEntity}}ByID(ID string) (domain.{{.DomainEntity}}, error) {
	list := Get{{.DomainEntity}}List()
	for idx, _ := range list {
		if(list[idx].ID == ID){
			return list[idx],nil
		}
	}
	return domain.{{.DomainEntity}}{}, errors.New("NOT_FOUND")
}



//Save{{.DomainEntity}} saves a {{.DomainEntity}} object
func Save{{.DomainEntity}}(it domain.{{.DomainEntity}}) domain.{{.DomainEntity}} {
	list := Get{{.DomainEntity}}List()
	it.ID = str.NewUUID()
	it.CreatedAt = time.Now()
	list = append(list, it)
	write{{.DomainEntity}}(list)
	return it
}

//Update{{.DomainEntity}}( updates a {{.DomainEntity}} object
func Update{{.DomainEntity}}(ID string, it domain.{{.DomainEntity}}) domain.{{.DomainEntity}}{
	list := Get{{.DomainEntity}}List()
	for idx, _ := range list {
		if(list[idx].ID == ID){
			list[idx] = it
			list[idx].ID = ID
			list[idx].UpdatedAt = time.Now()
			write{{.DomainEntity}}(list)
			return list[idx]
		}
	}
	return it
}

//Delete{{.DomainEntity}} delete object by giving ID
func Delete{{.DomainEntity}}(ID string) bool {
	list := Get{{.DomainEntity}}List()
	for idx, _ := range list {
		if(list[idx].ID == ID){
			list = append(list[:idx], list[idx+1:]...)
			write{{.DomainEntity}}(list)
			return true
		}
	}
	return false
}

func write{{.DomainEntity}}(list []domain.{{.DomainEntity}}) {
	b, err := json.Marshal(list)
	if err != nil {
		log.Println("Error while writiong file items")
		return
	}
	io.WriteFile(fmt.Sprintf("bd/%ss.json", "{{.DomainEntity}}"), string(b))
}
